// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enums
enum UserRoles {
  admin
  agent
  customer
}

enum ChatStatus {
  pending
  successful
  declined
}

enum Gender {
  male
  female
  other
}

enum OtpType {
  email_verification
  password_verification
}

enum ChatType {
  customer_to_agent
  team_chat
  group_chat
}

enum MediaType {
  image
  document
  video
}

enum DepartmentStatus {
  active
  inactive
}

enum TransactionStatus {
  pending
  failed
  successful
}

enum KycTier {
  tier1
  tier2
  tier3
}

enum AgentStatus {
  offline
  online
}

enum DepartmentType {
  sell
  buy
}

enum departmentNiche {
  crypto
  giftCard
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique @db.VarChar(255)
  email             String              @unique @db.VarChar(255)
  firstname         String              @db.VarChar(255)
  lastname          String              @db.VarChar(255)
  country           String              @db.VarChar(255)
  countryId         Int?
  phoneNumber       String              @unique @db.VarChar(20)
  profilePicture    String?
  password          String              @db.VarChar(255)
  gender            Gender
  role              UserRoles
  isVerified        Boolean             @default(false)
  otps              UserOTP[]
  agent             Agent?
  sentMessages      Message[]           @relation("SentMessages")
  receivedMessges   Message[]           @relation("ReceivedMessages")
  participations    ChatParticipant[]
  groups            ChatGroup[]
  inappNotification InAppNotification[]
  // transaction       Transaction[]
  notes             Notes[]
  KycStateTwo       KycStateTwo[]
  AccountActivity   AccountActivity[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model UserOTP {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  otp       String
  type      OtpType
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Agent {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int                  @unique
  // status        
  AgentStatus         AgentStatus          @default(online)
  assignedDepartments AssignedDepartment[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  // transaction         Transaction[]
  notes               Notes[]
  rate                Rate[]
}

model Department {
  id                  Int                  @id @default(autoincrement())
  title               String               @db.VarChar(255)
  description         String
  icon                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              DepartmentStatus
  categories          CatDepart[]
  chatsDetails        ChatDetails[]
  transaction         Transaction[]
  assignedDepartments AssignedDepartment[] // Relation to AssignedDepartmen
  Type                DepartmentType       @default(buy)
  niche               departmentNiche      @default(crypto)
}

model Category {
  id            Int              @id @default(autoincrement())
  title         String           @db.VarChar(255)
  subTitle      String?
  image         String?
  departments   CatDepart[]
  chatsDetails  ChatDetails[]
  subCategories CatSubcat[]
  // transaction   Transaction[]
  status        DepartmentStatus @default(active)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  transaction         Transaction[]
}

model Country {
  id          Int           @id @default(autoincrement())
  title       String
  transaction Transaction[]
}

model CatDepart {
  id           Int        @id @default(autoincrement())
  categoryId   Int
  category     Category   @relation(fields: [categoryId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
}

model AssignedDepartment {
  id           Int @id @default(autoincrement())
  agentId      Int
  departmentId Int

  agent      Agent      @relation(fields: [agentId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, departmentId])
}

model Subcategory {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  price       Decimal
  catSubcat   CatSubcat[]
  // chat         Chat[]
  transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model CatSubcat {
  id            Int         @id @default(autoincrement())
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])
  subCategoryId Int
  subCategory   Subcategory @relation(fields: [subCategoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([categoryId, subCategoryId])
}

model Chat {
  id           Int               @id @default(autoincrement())
  participants ChatParticipant[]
  chatType     ChatType
  chatDetails  ChatDetails?
  chatGroup    ChatGroup?
  messages     Message[]
  transactions Transaction[]
  rate         Rate[]
  chatDeclined Chatdeclined[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatDetails {
  id           Int        @id @default(autoincrement())
  chatId       Int        @unique
  chat         Chat       @relation(fields: [chatId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  categoryId   Int
  category     Category   @relation(fields: [categoryId], references: [id])
  status       ChatStatus
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ChatGroup {
  id           Int     @id @default(autoincrement())
  groupName    String
  groupProfile String?
  chatId       Int     @unique
  chat         Chat    @relation(fields: [chatId], references: [id])
  adminId      Int     @unique
  admin        User    @relation(fields: [adminId], references: [id])
}

// model GroupChat {
//   id          Int           @id @default(autoincrement())
//   agentId     Int
//   agent       Agent         @relation(fields: [agentId], references: [id])
//   adminId     Int
//   admin       User          @relation(fields: [adminId], references: [id])
//   messages    Message[]     @relation("GroupMessages", references: [id])
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   GroupMember GroupMember[]
// }

// model GroupMember {
//   id        Int       @id @default(autoincrement())
//   groupId   Int
//   group     GroupChat @relation(fields: [groupId], references: [id])
//   agentId   Int
//   agent     Agent     @relation(fields: [agentId], references: [id])
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

model Message {
  id          Int          @id @default(autoincrement())
  senderId    Int
  receiverId  Int?
  sender      User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User?        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  attachments Attachment[]
  chatId      Int
  chat        Chat         @relation(fields: [chatId], references: [id])
  message     String       @db.VarChar(255)
  isRead      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Attachment {
  id         Int       @id @default(autoincrement())
  messageId  Int
  message    Message   @relation(fields: [messageId], references: [id])
  media_type MediaType
  media_url  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Transaction {
  id            Int               @id @default(autoincrement())
  chatId        Int
  subCategoryId Int
  countryId     Int?
  cardType      String?
  departmentId  Int?              @map("Transaction_Department_FK")
  categoryId    Int?              @map("Transaction_Category_FK")
  cardNumber    String?
  amount        Float?
  exchangeRate  Float?
  amountNaira   Float?
  cryptoAmount  Float?
  fromAddress   String?
  toAddress     String?
  status        TransactionStatus @default(successful)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  chat          Chat              @relation(fields: [chatId], references: [id], map: "Transaction_Chat_FK")
  subCategory   Subcategory       @relation(fields: [subCategoryId], references: [id], map: "Transaction_SubCategory_FK")
  country       Country?          @relation(fields: [countryId], references: [id], map: "Transaction_Country_FK")
  department    Department?       @relation(fields: [departmentId], references: [id], map: "Transaction_Department_FK")
  category      Category?         @relation(fields: [categoryId], references: [id], map: "Transaction_Category_FK")
}


model Notes {
  id             Int      @id @default(autoincrement())
  title          String?
  userId         Int
  agentId        Int
  isHighlighited Boolean?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  agent          Agent    @relation(fields: [agentId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Rate {
  id          Int      @id @default(autoincrement())
  rate        Float?
  amount      Float?
  amountNaira Float?
  agentId     Int
  chatId      Int
  chat        Chat     @relation(fields: [chatId], references: [id])
  agent       Agent    @relation(fields: [agentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  message   String
  type      UserRoles
  isSingle  Boolean
  image     String?
  userId    Int?
  createdAt DateTime  @default(now())
}

model NotificationAttachment {
  id             Int    @id @default(autoincrement())
  mediUrl        String
  motificationId Int
}

model InAppNotification {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
}

model Chatdeclined {
  id        Int      @id @default(autoincrement())
  message   String?
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model KycStateTwo {
  id        Int      @id @default(autoincrement())
  userId    Int
  bvn       String
  surName   String?
  firtName  String?
  dob       String?
  status    KycTier
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model AccountActivity {
  id          Int      @id @default(autoincrement())
  userId      Int
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Banner {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
}
